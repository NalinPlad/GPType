---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
---

<Layout title="GPType">
  <header>
    <span class="text-gradient">GPType</span><span class="desc">Sneaky GPT Completions<br>Like Hacker Typer but GPT</span>
    <div id="modal-box" class="modal">
      <div class="modal-content">
        <h1><span class="text-gradient">GPType</span></h1>
        <p>Hacker Typer but GPT-3. You can reopen this window using Shift + ]</p>
        <!-- <p>hello test test test test test test test </p> -->
        <label>Enter OpenAI API key</label>
        <input pattern="^sk\-[a-zA-Z0-9]+" type="text" placeholder="sk-xxxxxxxxxxxxxxxx" id="apikey"/>
        <span class="close">Close</span>
      </div>
    </div>
    <!-- <input type="button" id="launch" value="→"/> -->
  </header>
  <main>
    <textarea id="type"/>
  </main>
</Layout>

<script>
  // Wierd astro bug
  window.scrollTo(0,0);
  
  // Welcome message
  console.log(`
  Welcome to the logs, all the API responses are logged here in case you want to look at them, as well as any errors.
  
  have fun -
  - @NalinPlad on github
  `)
  
  
  
  let demo_text =
  'Hello human! This is an example of the typing function on this site.\n\nWhen you type, the text output is replaced with a predefined string, in this case it is hard coded, but if you supply an OpenAI API key, the text will be completed by GPT-3.\n\nTo activate the generation, use the keybind "Shift + \\". The app will then request a completion of the text, and then continue to type it like you are doing right now. To continue, press "Shift + ]". Then enter your API key, press enter, then type in some text to complete.\n\nSAFETY\nAll API requests and code is run client side, and your key is stored in the browsers LocalStorage. This is a completely static site. Check the network tab of the devtools if you dont believe me. THE END';
  
  const textbox = document.querySelector("#type") as HTMLTextAreaElement;
  const apikey = document.querySelector("#apikey") as HTMLInputElement;
  const header = document.querySelector("header") as HTMLElement;
  
  // const modalbutton = document.querySelector("#btn-modal") as HTMLButtonElement;
  const modal = document.querySelector("#modal-box") as HTMLDivElement;
  const close = document.querySelector(".close") as HTMLSpanElement;

  const speed = 1;


  
  apikey.addEventListener("keydown", (e) => {
    if(e.key === "Enter") {
      // Auth check
      async function checkAuth(){
        await fetch("https://api.openai.com/v1/models/text-davinci-003", {
          method: "GET",
          headers: {
            "Authorization": `Bearer ${apikey.value}`
          }
        })
        .then(resp => resp.json())
        .then(data => {
          if(data.error){alert("API error ‼️ Please check you API Key, and check the console for error logs 🪵");console.log(data)}
          else {
            // console.log(data)
            // startListen(data.choices[0].text, textbox, 1);
            localStorage.setItem("", apikey.value);
            header.style.display = "none";
          }
        });
      }

      checkAuth();
    }
  });

  document.addEventListener("keydown", (e) => {
    if(e.key === "|"){
      e.preventDefault()
      async function complete(){

        const payload = {
          "model": "text-davinci-003",
                "prompt": textbox.value,
                "max_tokens": 100,
                // "temperature": 0,
                // "top_p": 1,
                // "n": 1,
                // "stream": false,
                // "logprobs": null,
                // "stop": "\n" 
        }

        await fetch("https://api.openai.com/v1/completions", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${apikey.value}`
          },
          body: JSON.stringify(payload)
        })
        .then(resp => resp.json())
        .then(data => {
          if(data.error){alert("API error ‼️ Please check you API Key, and check the console for error logs 🪵");console.log(data)}
          else {
            console.log(data)
            startListen(data.choices[0].text, textbox, 1);
          }
        });
      }

      complete()
    } else if(e.key === "}") {
      modal.style.opacity = "100%"
      modal.style.display = "flex"; 
    }
  });
  
  function startListen(text:string, box:HTMLTextAreaElement, speed: number) {
    let i = 0;
    console.log(text, text.length)
    const len = text.length
    box.addEventListener("keydown", (e) => {
      if (i < len) {
        e.preventDefault();

        textbox.value += text[0];
        text = text.slice(1)

        // console.log(text[0], text);
        i++;
      }
      // console.log(i, text.length)
    });
  }
  // 



  // When the user clicks on the button, open the modal
  // modalbutton.onclick = function() {
  //   modal.style.display = "block";
  // }

  // When the user clicks on <span> (x), close the modal
  close.onclick = function() {
    modal.style.display = "none";
  }

  // When the user clicks anywhere outside of the modal, close it
  window.onclick = function(event) {
    if (event.target == modal) {
      modal.style.display = "none";
      modal.style.opacity = "100%"
    }
  }

  textbox.focus();


  if(localStorage.getItem("")){
    apikey.value = localStorage.getItem("");
  } else {
    textbox.placeholder = "Start Typing..."
    startListen(demo_text, textbox, speed)
  }
</script>

<style>
  header {
    width: 100vw;
    max-width:100%;  /* added */
    background-color: rgb(238, 238, 238);

    padding: 20px;
    font-weight: 800;
    font-size: 1rem;

    display: flex;
    align-items: center;
    justify-content: center;

    transition: all 0.5s;

    /* font-family: 'Courier New', Courier, monospace; */
  }

  .desc {
    font-size: 1rem;
    color:#888;
    font-weight: 300;
    line-height: 2rem;
  }

  button {
    padding: 10px;
    background-color: black;

    color: white;
    font-weight: 700;
    font-size: 1rem;

    border: none;
    border-radius: 5px;
    margin-inline-start: 3rem;

    cursor: pointer;
    transition: all 0.2s ease-out;
  }

  button:hover {
    background-color: rgb(18, 0, 45);
    /* color: black; */
  }

  header > span {
    font-size: 2rem;
    margin-inline: 1rem;
  }

  header > label {
    margin-inline-start: 3rem;
    margin-inline-end: 1rem ;
  }

  header > input {
    border: 1px solid rgba(128, 128, 128, 0.529);
    border-radius: 2px;
    padding: 2px;
    font-family: font-family: system-ui, sans-serif;
  }

  input:focus {
    outline-width: 0;
  }

  textarea:focus {
    outline-width: 0;
  }

  main {
    display: flex;
    justify-content: center;
  }

  #type {
    background-color: rgb(233, 233, 233);
    margin: 2rem;
    width: 50vw;
    height: 50vh;

    border-radius: 10px;
    border: none;
    /* border: 1px rgba(0, 0, 0, 0.148) solid; */

    padding: 2rem;
    resize: none;
  }

  /* The Modal (background) */
  .modal {
    display: none; /* Hidden by default */
    position: fixed; /* Stay in place */
    z-index: 1; /* Sit on top */
    left: 0;
    top: 0;
    width: 100vw; /* Full width */
    height: 100vh; /* Full height */
    max-height: 100%;
    max-width: 100%;
    overflow: auto; /* Enable scroll if needed */
    background-color: rgb(0,0,0); /* Fallback color */
    background-color: rgba(0,0,0,0.5); /* Black w/ opacity */

    align-items: center;
    justify-content: center;

    transition: all 0.5s;
    opacity: 0%;
  }

/* Modal Content/Box */
.modal-content {
  font-size: 1rem;
  background-color: #fefefe;
  /* margin: 15% auto; 15% from the top and centered  */
  padding: 20px;
  border: 1px solid #888;
  width: 50vmax;

  display: flex;
  flex-direction: column;
  align-items: center;

  gap: 1rem;

  border-radius: 10px;
}

.modal-content > h1 {
  font-size: 5rem;
  margin-bottom: 1rem;
}

.modal-content > p {
  font-size: 1rem;
  width: 50%;
  text-align: center;
  color: #888;
  margin-bottom: 1rem;
}

/* The Close Button */
.close {
  margin-top: 1rem;
  color: #aaa;
  float: right;
  font-size: 18px;
  /* font-weight: bold; */
  font-weight: 400;
  background-color: #ebebeb;
  width: 5rem;
  text-align: center;

  border-radius: 5px;
  transition: all 0.2s;
}

.close:hover,
.close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}
</style>

<style is:global>
  * {
  margin: 0;
  padding: 0;
  font-family: font-family: system-ui, sans-serif;
}
  body {
    margin: none;
    overflow: hidden;
  }

  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }

  code {
    font-size: 0.875em;
    font-weight: bold;
    background: rgba(var(--accent), 12%);
    color: rgb(var(--accent));
    border-radius: 4px;
    padding: 0.3em 0.45em;
  }
</style>
