---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
---

<Layout title="GPType">
  <header>
    <span class="text-gradient">GPType</span>
    <label>Enter OpenAI API key</label>
    <input pattern="^sk\-[a-zA-Z0-9]+" type="text" placeholder="sk-xxxxxxxxxxxxxxxx" id="apikey"/>
    <!-- <input type="button" id="launch" value="→"/> -->
  </header>
  <main>
    <textarea id="type"/>
  </main>
</Layout>

<script>
  // Wierd astro bug
  window.scrollTo(0,0);
  // Welcome message
  console.log(`
    Welcome to the logs, all the API responses are logged here in case you want to look at them, as well as any errors.

    have fun -
    - @NalinPlad on github
  `)
  
  
  
  let demo_text =
  'Did you not read the header??\nYou need to enter you OpenAI API key before using this app!\n\nIf you need help finding that, click "Where do I find that?" in the header';

  const textbox = document.querySelector("#type") as HTMLTextAreaElement;
  const apikey = document.querySelector("#apikey") as HTMLInputElement;
  
  const speed = 1;

  if(localStorage.getItem("")){
    apikey.value = localStorage.getItem("");
  }
  
  apikey.addEventListener("keydown", (e) => {
    if(e.key === "Enter") {
      // Auth check
      // if(localStorage.getItem("") === undefined){
        localStorage.setItem("", apikey.value);
      // }
    }
  });

  document.addEventListener("keydown", (e) => {
    if(e.key == "|"){
      e.preventDefault()
      async function complete(){

        const payload = {
          "model": "text-davinci-003",
                "prompt": textbox.value,
                "max_tokens": 100,
                // "temperature": 0,
                // "top_p": 1,
                // "n": 1,
                // "stream": false,
                // "logprobs": null,
                // "stop": "\n" 
        }

        await fetch("https://api.openai.com/v1/completions", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${apikey.value}`
          },
          body: JSON.stringify(payload)
        })
        .then(resp => resp.json())
        .then(data => {
          if(data.error){alert("API error ‼️ Please check you API Key, and check the console for error logs 🪵");console.log(data)}
          else {
            console.log(data)
            startListen(data.choices[0].text, textbox, 1);
          }
        });
      }

      complete()
    }
  });
  
  function startListen(text:string, box:HTMLTextAreaElement, speed: number) {
    let i = 0;
    console.log(text, text.length)
    const len = text.length
    box.addEventListener("keydown", (e) => {
      if (i < len) {
        e.preventDefault();

        textbox.value += text[0];
        text = text.slice(1)

        // console.log(text[0], text);
        i++;
      }
      console.log(i, text.length)
    });
  }
  // startListen(demo_text, textbox, speed)
</script>

<style>
  header {
    width: 100vw;
    max-width:100%;  /* added */
    background-color: rgb(238, 238, 238);

    padding: 20px;
    font-weight: 800;
    font-size: 1rem;

    display: flex;
    align-items: center;

    /* font-family: 'Courier New', Courier, monospace; */
  }

  header > span {
    font-size: 2rem;
    margin-inline: 1rem;
  }

  header > label {
    margin-inline-start: 3rem;
    margin-inline-end: 1rem ;
  }

  header > input {
    border: 1px solid rgba(128, 128, 128, 0.529);
    border-radius: 2px;
    padding: 2px;
    font-family: font-family: system-ui, sans-serif;
  }

  input:focus {
    outline-width: 0;
  }

  textarea:focus {
    outline-width: 0;
  }

  main {
    display: flex;
    justify-content: center;
  }

  #type {
    background-color: rgb(233, 233, 233);
    margin: 2rem;
    width: 50vw;
    height: 50vh;

    border-radius: 10px;
    /* border: 1px rgba(0, 0, 0, 0.148) solid; */

    padding: 2rem;
    resize: none;
  }
</style>

<style is:global>
  * {
  margin: 0;
  padding: 0;
  font-family: font-family: system-ui, sans-serif;
}
  body {
    margin: none;
    overflow: hidden;
  }

  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }

  code {
    font-size: 0.875em;
    font-weight: bold;
    background: rgba(var(--accent), 12%);
    color: rgb(var(--accent));
    border-radius: 4px;
    padding: 0.3em 0.45em;
  }
</style>
